C51 COMPILER V9.02   KEYBOARD                                                              04/12/2022 17:34:17 PAGE 1   


C51 COMPILER V9.02, COMPILATION OF MODULE KEYBOARD
OBJECT MODULE PLACED IN ..\output\keyboard.obj
COMPILER INVOKED BY: D:\Keil_v4\C51\BIN\C51.EXE ..\src\keyboard.c BROWSE INCDIR(..\inc) DEBUG OBJECTEXTEND PRINT(.\keybo
                    -ard.lst) OBJECT(..\output\keyboard.obj)

line level    source

   1          /*********************************************************************************** 
   2          ;功能说明:STC89C52开机次数+数码管温度报警+1602时间
   3          ;文件名称:keyboard.c
   4          :描    述：4*4矩阵按键驱动模块
   5          ;版本号：v1.0.0  
   6          ;微处理器:STC89C52
   7          ;编译环境:Keil uVision V4.10 
   8          ;作    者:Cui Xinghai 
   9          ;创建日期:2022.4.9   
  10          ;***********************************************************************************/
  11          
  12          #define  _KEY_BOARD_C
  13          #include "config.h"
  14          #include "keyboard.h"
  15          #include "main.h"
  16          
  17          const uint8 code KeyCodeMap[4][4] = {  //矩阵按键到标准键码的映射表
  18              { '1',  '2',  '3', 0x26 },  //数字键1、数字键2、数字键3、向上键
  19              { '4',  '5',  '6', 0x25 },  //数字键4、数字键5、数字键6、向左键
  20              { '7',  '8',  '9', 0x28 },  //数字键7、数字键8、数字键9、向下键
  21              { '0', 0x1B, 0x0D, 0x27 }   //数字键0、ESC键、  回车键、 向右键
  22          };
  23          uint8 pdata KeySta[4][4] = {  //全部矩阵按键的当前状态
  24              {1, 1, 1, 1},  {1, 1, 1, 1},  {1, 1, 1, 1},  {1, 1, 1, 1}
  25          };
  26          
  27          /* 按键驱动函数，检测按键动作，调度相应动作函数，需在主循环中调用 */
  28          void KeyDriver()
  29          {
  30   1          uint8 i, j;
  31   1          static uint8 pdata backup[4][4] = {  //按键值备份，保存前一次的值
  32   1              {1, 1, 1, 1},  {1, 1, 1, 1},  {1, 1, 1, 1},  {1, 1, 1, 1}
  33   1          };
  34   1          
  35   1          for (i=0; i<4; i++)  //循环检测4*4的矩阵按键
  36   1          {
  37   2              for (j=0; j<4; j++)
  38   2              {
  39   3                  if (backup[i][j] != KeySta[i][j])    //检测按键动作
  40   3                  {
  41   4                      if (backup[i][j] != 0)           //按键按下时执行动作
  42   4                      {
  43   5                          KeyAction(KeyCodeMap[i][j]); //调用按键动作函数
  44   5                      }
  45   4                      backup[i][j] = KeySta[i][j];     //刷新前一次的备份值
  46   4                  }
  47   3              }
  48   2          }
  49   1      }
  50          /* 按键扫描函数，需在定时中断中调用，推荐调用间隔1ms */
  51          void KeyScan()
  52          {
  53   1          uint8 i;
  54   1          static uint8 keyout = 0;   //矩阵按键扫描输出索引
C51 COMPILER V9.02   KEYBOARD                                                              04/12/2022 17:34:17 PAGE 2   

  55   1          static uint8 keybuf[4][4] = {  //矩阵按键扫描缓冲区
  56   1              {0xFF, 0xFF, 0xFF, 0xFF},  {0xFF, 0xFF, 0xFF, 0xFF},
  57   1              {0xFF, 0xFF, 0xFF, 0xFF},  {0xFF, 0xFF, 0xFF, 0xFF}
  58   1          };
  59   1      
  60   1          //将一行的4个按键值移入缓冲区
  61   1          keybuf[keyout][0] = (keybuf[keyout][0] << 1) | KEY_IN_1;
  62   1          keybuf[keyout][1] = (keybuf[keyout][1] << 1) | KEY_IN_2;
  63   1          keybuf[keyout][2] = (keybuf[keyout][2] << 1) | KEY_IN_3;
  64   1          keybuf[keyout][3] = (keybuf[keyout][3] << 1) | KEY_IN_4;
  65   1          //消抖后更新按键状态
  66   1          for (i=0; i<4; i++)  //每行4个按键，所以循环4次
  67   1          {
  68   2              if ((keybuf[keyout][i] & 0x0F) == 0x00)
  69   2              {   //连续4次扫描值为0，即4*4ms内都是按下状态时，可认为按键已稳定的按下
  70   3                  KeySta[keyout][i] = 0;
  71   3              }
  72   2              else if ((keybuf[keyout][i] & 0x0F) == 0x0F)
  73   2              {   //连续4次扫描值为1，即4*4ms内都是弹起状态时，可认为按键已稳定的弹起
  74   3                  KeySta[keyout][i] = 1;
  75   3              }
  76   2          }
  77   1          //执行下一次的扫描输出
  78   1          keyout++;        //输出索引递增
  79   1          keyout &= 0x03;  //索引值加到4即归零
  80   1          switch (keyout)  //根据索引值，释放当前输出引脚，拉低下次的输出引脚
  81   1          {
  82   2              case 0: KEY_OUT_4 = 1; KEY_OUT_1 = 0; break;
  83   2              case 1: KEY_OUT_1 = 1; KEY_OUT_2 = 0; break;
  84   2              case 2: KEY_OUT_2 = 1; KEY_OUT_3 = 0; break;
  85   2              case 3: KEY_OUT_3 = 1; KEY_OUT_4 = 0; break;
  86   2              default: break;
  87   2          }
  88   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    327    ----
   CONSTANT SIZE    =     16    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =     32    ----
   DATA SIZE        =     17       2
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
